// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v5.26.1
// source: pkg/process/encproto/encounter.proto

package encproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncounterBoss int32

const (
	EncounterBoss_DARK_MOUNTAIN_PREDATOR             EncounterBoss = 0
	EncounterBoss_RAVAGED_TYRANT_OF_BEASTS           EncounterBoss = 1
	EncounterBoss_INCUBUS_MORPHE                     EncounterBoss = 2
	EncounterBoss_NIGHTMARISH_MORPHE                 EncounterBoss = 3
	EncounterBoss_COVETOUS_DEVOURER_VYKAS            EncounterBoss = 4
	EncounterBoss_COVETOUS_LEGION_COMMANDER_VYKAS    EncounterBoss = 5
	EncounterBoss_SAYDON                             EncounterBoss = 6
	EncounterBoss_KAKUL                              EncounterBoss = 7
	EncounterBoss_ENCORE_DESIRING_KAKUL_SAYDON       EncounterBoss = 8
	EncounterBoss_GEHENNA_HELKASIRS                  EncounterBoss = 9
	EncounterBoss_PROKEL_SPIRITUAL_ECHO              EncounterBoss = 10
	EncounterBoss_ASHTAROT                           EncounterBoss = 11
	EncounterBoss_PRIMORDIAL_NIGHTMARE               EncounterBoss = 12
	EncounterBoss_BRELSHAZA_MONARCH_OF_NIGHTMARES    EncounterBoss = 13
	EncounterBoss_PHANTOM_LEGION_COMMANDER_BRELSHAZA EncounterBoss = 14
	EncounterBoss_TIENIS                             EncounterBoss = 15
	EncounterBoss_PRUNYA                             EncounterBoss = 16
	EncounterBoss_LAURIEL                            EncounterBoss = 17
	EncounterBoss_EVOLVED_MAURUGA                    EncounterBoss = 18
	EncounterBoss_LORD_OF_DEGRADATION_AKKAN          EncounterBoss = 19
	EncounterBoss_PLAGUE_LEGION_COMMANDER_AKKAN      EncounterBoss = 20
	EncounterBoss_LORD_OF_KARTHEON_AKKAN             EncounterBoss = 21
	EncounterBoss_KALTAYA_THE_BLOOMING_CHAOS         EncounterBoss = 22
	EncounterBoss_RAKATHUS_THE_LURKING_ARROGANCE     EncounterBoss = 23
	EncounterBoss_FIREHORN_TRAMPLER_OF_EARTH         EncounterBoss = 24
	EncounterBoss_LAZARAM_THE_TRAILBLAZER            EncounterBoss = 25
	EncounterBoss_VESKAL                             EncounterBoss = 26
	EncounterBoss_GARGADETH                          EncounterBoss = 27
	EncounterBoss_SONAVEL                            EncounterBoss = 28
	EncounterBoss_HANUMATAN                          EncounterBoss = 29
	EncounterBoss_CALILIGOS                          EncounterBoss = 30
	EncounterBoss_DESKALUDA                          EncounterBoss = 31
	EncounterBoss_KUNGELANIUM                        EncounterBoss = 32
	EncounterBoss_ACHATES                            EncounterBoss = 33
)

// Enum value maps for EncounterBoss.
var (
	EncounterBoss_name = map[int32]string{
		0:  "DARK_MOUNTAIN_PREDATOR",
		1:  "RAVAGED_TYRANT_OF_BEASTS",
		2:  "INCUBUS_MORPHE",
		3:  "NIGHTMARISH_MORPHE",
		4:  "COVETOUS_DEVOURER_VYKAS",
		5:  "COVETOUS_LEGION_COMMANDER_VYKAS",
		6:  "SAYDON",
		7:  "KAKUL",
		8:  "ENCORE_DESIRING_KAKUL_SAYDON",
		9:  "GEHENNA_HELKASIRS",
		10: "PROKEL_SPIRITUAL_ECHO",
		11: "ASHTAROT",
		12: "PRIMORDIAL_NIGHTMARE",
		13: "BRELSHAZA_MONARCH_OF_NIGHTMARES",
		14: "PHANTOM_LEGION_COMMANDER_BRELSHAZA",
		15: "TIENIS",
		16: "PRUNYA",
		17: "LAURIEL",
		18: "EVOLVED_MAURUGA",
		19: "LORD_OF_DEGRADATION_AKKAN",
		20: "PLAGUE_LEGION_COMMANDER_AKKAN",
		21: "LORD_OF_KARTHEON_AKKAN",
		22: "KALTAYA_THE_BLOOMING_CHAOS",
		23: "RAKATHUS_THE_LURKING_ARROGANCE",
		24: "FIREHORN_TRAMPLER_OF_EARTH",
		25: "LAZARAM_THE_TRAILBLAZER",
		26: "VESKAL",
		27: "GARGADETH",
		28: "SONAVEL",
		29: "HANUMATAN",
		30: "CALILIGOS",
		31: "DESKALUDA",
		32: "KUNGELANIUM",
		33: "ACHATES",
	}
	EncounterBoss_value = map[string]int32{
		"DARK_MOUNTAIN_PREDATOR":             0,
		"RAVAGED_TYRANT_OF_BEASTS":           1,
		"INCUBUS_MORPHE":                     2,
		"NIGHTMARISH_MORPHE":                 3,
		"COVETOUS_DEVOURER_VYKAS":            4,
		"COVETOUS_LEGION_COMMANDER_VYKAS":    5,
		"SAYDON":                             6,
		"KAKUL":                              7,
		"ENCORE_DESIRING_KAKUL_SAYDON":       8,
		"GEHENNA_HELKASIRS":                  9,
		"PROKEL_SPIRITUAL_ECHO":              10,
		"ASHTAROT":                           11,
		"PRIMORDIAL_NIGHTMARE":               12,
		"BRELSHAZA_MONARCH_OF_NIGHTMARES":    13,
		"PHANTOM_LEGION_COMMANDER_BRELSHAZA": 14,
		"TIENIS":                             15,
		"PRUNYA":                             16,
		"LAURIEL":                            17,
		"EVOLVED_MAURUGA":                    18,
		"LORD_OF_DEGRADATION_AKKAN":          19,
		"PLAGUE_LEGION_COMMANDER_AKKAN":      20,
		"LORD_OF_KARTHEON_AKKAN":             21,
		"KALTAYA_THE_BLOOMING_CHAOS":         22,
		"RAKATHUS_THE_LURKING_ARROGANCE":     23,
		"FIREHORN_TRAMPLER_OF_EARTH":         24,
		"LAZARAM_THE_TRAILBLAZER":            25,
		"VESKAL":                             26,
		"GARGADETH":                          27,
		"SONAVEL":                            28,
		"HANUMATAN":                          29,
		"CALILIGOS":                          30,
		"DESKALUDA":                          31,
		"KUNGELANIUM":                        32,
		"ACHATES":                            33,
	}
)

func (x EncounterBoss) Enum() *EncounterBoss {
	p := new(EncounterBoss)
	*p = x
	return p
}

func (x EncounterBoss) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterBoss) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_process_encproto_encounter_proto_enumTypes[0].Descriptor()
}

func (EncounterBoss) Type() protoreflect.EnumType {
	return &file_pkg_process_encproto_encounter_proto_enumTypes[0]
}

func (x EncounterBoss) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterBoss.Descriptor instead.
func (EncounterBoss) EnumDescriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{0}
}

type HPBossLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp      int64   `protobuf:"varint,1,opt,name=hp,proto3" json:"hp,omitempty"`
	Percent float64 `protobuf:"fixed64,2,opt,name=percent,proto3" json:"percent,omitempty"`
	Time    int32   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HPBossLogEntry) Reset() {
	*x = HPBossLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPBossLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPBossLogEntry) ProtoMessage() {}

func (x *HPBossLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPBossLogEntry.ProtoReflect.Descriptor instead.
func (*HPBossLogEntry) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{0}
}

func (x *HPBossLogEntry) GetHp() int64 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *HPBossLogEntry) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *HPBossLogEntry) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type HPBossLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*HPBossLogEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *HPBossLog) Reset() {
	*x = HPBossLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPBossLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPBossLog) ProtoMessage() {}

func (x *HPBossLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPBossLog.ProtoReflect.Descriptor instead.
func (*HPBossLog) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{1}
}

func (x *HPBossLog) GetEntries() []*HPBossLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type HPLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encounters map[string]*HPBossLog `protobuf:"bytes,1,rep,name=encounters,proto3" json:"encounters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HPLog) Reset() {
	*x = HPLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPLog) ProtoMessage() {}

func (x *HPLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPLog.ProtoReflect.Descriptor instead.
func (*HPLog) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{2}
}

func (x *HPLog) GetEncounters() map[string]*HPBossLog {
	if x != nil {
		return x.Encounters
	}
	return nil
}

type BuffSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class       int32  `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Id          string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BuffSkill) Reset() {
	*x = BuffSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffSkill) ProtoMessage() {}

func (x *BuffSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffSkill.ProtoReflect.Descriptor instead.
func (*BuffSkill) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{3}
}

func (x *BuffSkill) GetClass() int32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *BuffSkill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BuffSkill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuffSkill) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *BuffSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon        string     `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category    string     `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Set         string     `protobuf:"bytes,5,opt,name=set,proto3" json:"set,omitempty"`
	Skill       *BuffSkill `protobuf:"bytes,6,opt,name=skill,proto3,oneof" json:"skill,omitempty"`
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{4}
}

func (x *BuffInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuffInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *BuffInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BuffInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *BuffInfo) GetSet() string {
	if x != nil {
		return x.Set
	}
	return ""
}

func (x *BuffInfo) GetSkill() *BuffSkill {
	if x != nil {
		return x.Skill
	}
	return nil
}

type SkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *SkillInfo) Reset() {
	*x = SkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillInfo) ProtoMessage() {}

func (x *SkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillInfo.ProtoReflect.Descriptor instead.
func (*SkillInfo) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{5}
}

func (x *SkillInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkillInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type BuffGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Buffs []string `protobuf:"bytes,2,rep,name=buffs,proto3" json:"buffs,omitempty"`
}

func (x *BuffGroupInfo) Reset() {
	*x = BuffGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffGroupInfo) ProtoMessage() {}

func (x *BuffGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffGroupInfo.ProtoReflect.Descriptor instead.
func (*BuffGroupInfo) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{6}
}

func (x *BuffGroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuffGroupInfo) GetBuffs() []string {
	if x != nil {
		return x.Buffs
	}
	return nil
}

type BuffGroupsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*BuffGroupInfo `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *BuffGroupsInfo) Reset() {
	*x = BuffGroupsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffGroupsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffGroupsInfo) ProtoMessage() {}

func (x *BuffGroupsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffGroupsInfo.ProtoReflect.Descriptor instead.
func (*BuffGroupsInfo) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{7}
}

func (x *BuffGroupsInfo) GetGroups() []*BuffGroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

type PlayerDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crit           float32 `protobuf:"fixed32,1,opt,name=crit,proto3" json:"crit,omitempty"`
	CritDamage     float32 `protobuf:"fixed32,2,opt,name=crit_damage,json=critDamage,proto3" json:"crit_damage,omitempty"`
	FrontAttack    float32 `protobuf:"fixed32,3,opt,name=front_attack,json=frontAttack,proto3" json:"front_attack,omitempty"`
	BackAttack     float32 `protobuf:"fixed32,4,opt,name=back_attack,json=backAttack,proto3" json:"back_attack,omitempty"`
	Buff           float32 `protobuf:"fixed32,5,opt,name=buff,proto3" json:"buff,omitempty"`
	Brand          float32 `protobuf:"fixed32,6,opt,name=brand,proto3" json:"brand,omitempty"`
	Casts          int32   `protobuf:"varint,7,opt,name=casts,proto3" json:"casts,omitempty"`
	CastsPerMinute float32 `protobuf:"fixed32,8,opt,name=casts_per_minute,json=castsPerMinute,proto3" json:"casts_per_minute,omitempty"`
	Hits           int32   `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	HitsPerMinute  float32 `protobuf:"fixed32,10,opt,name=hits_per_minute,json=hitsPerMinute,proto3" json:"hits_per_minute,omitempty"`
}

func (x *PlayerDamage) Reset() {
	*x = PlayerDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDamage) ProtoMessage() {}

func (x *PlayerDamage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDamage.ProtoReflect.Descriptor instead.
func (*PlayerDamage) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerDamage) GetCrit() float32 {
	if x != nil {
		return x.Crit
	}
	return 0
}

func (x *PlayerDamage) GetCritDamage() float32 {
	if x != nil {
		return x.CritDamage
	}
	return 0
}

func (x *PlayerDamage) GetFrontAttack() float32 {
	if x != nil {
		return x.FrontAttack
	}
	return 0
}

func (x *PlayerDamage) GetBackAttack() float32 {
	if x != nil {
		return x.BackAttack
	}
	return 0
}

func (x *PlayerDamage) GetBuff() float32 {
	if x != nil {
		return x.Buff
	}
	return 0
}

func (x *PlayerDamage) GetBrand() float32 {
	if x != nil {
		return x.Brand
	}
	return 0
}

func (x *PlayerDamage) GetCasts() int32 {
	if x != nil {
		return x.Casts
	}
	return 0
}

func (x *PlayerDamage) GetCastsPerMinute() float32 {
	if x != nil {
		return x.CastsPerMinute
	}
	return 0
}

func (x *PlayerDamage) GetHits() int32 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *PlayerDamage) GetHitsPerMinute() float32 {
	if x != nil {
		return x.HitsPerMinute
	}
	return 0
}

type Tripods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  int32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second int32 `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	Third  int32 `protobuf:"varint,3,opt,name=third,proto3" json:"third,omitempty"`
}

func (x *Tripods) Reset() {
	*x = Tripods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tripods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tripods) ProtoMessage() {}

func (x *Tripods) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tripods.ProtoReflect.Descriptor instead.
func (*Tripods) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{9}
}

func (x *Tripods) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Tripods) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *Tripods) GetThird() int32 {
	if x != nil {
		return x.Third
	}
	return 0
}

type SkillDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Damage          int64    `protobuf:"varint,1,opt,name=damage,proto3" json:"damage,omitempty"`
	Dps             int64    `protobuf:"varint,2,opt,name=dps,proto3" json:"dps,omitempty"`
	Percent         float32  `protobuf:"fixed32,3,opt,name=percent,proto3" json:"percent,omitempty"`
	Crit            float32  `protobuf:"fixed32,4,opt,name=crit,proto3" json:"crit,omitempty"`
	CritDamage      float32  `protobuf:"fixed32,5,opt,name=crit_damage,json=critDamage,proto3" json:"crit_damage,omitempty"`
	FrontAttack     float32  `protobuf:"fixed32,6,opt,name=front_attack,json=frontAttack,proto3" json:"front_attack,omitempty"`
	BackAttack      float32  `protobuf:"fixed32,7,opt,name=back_attack,json=backAttack,proto3" json:"back_attack,omitempty"`
	Buff            float32  `protobuf:"fixed32,8,opt,name=buff,proto3" json:"buff,omitempty"`
	Brand           float32  `protobuf:"fixed32,9,opt,name=brand,proto3" json:"brand,omitempty"`
	AveragePerCasts float32  `protobuf:"fixed32,10,opt,name=average_per_casts,json=averagePerCasts,proto3" json:"average_per_casts,omitempty"`
	AveragePerHits  float32  `protobuf:"fixed32,11,opt,name=average_per_hits,json=averagePerHits,proto3" json:"average_per_hits,omitempty"`
	Max             int64    `protobuf:"varint,12,opt,name=max,proto3" json:"max,omitempty"`
	Casts           int32    `protobuf:"varint,13,opt,name=casts,proto3" json:"casts,omitempty"`
	CastsPerMinute  float32  `protobuf:"fixed32,14,opt,name=casts_per_minute,json=castsPerMinute,proto3" json:"casts_per_minute,omitempty"`
	Hits            int32    `protobuf:"varint,15,opt,name=hits,proto3" json:"hits,omitempty"`
	HitsPerMinute   float32  `protobuf:"fixed32,16,opt,name=hits_per_minute,json=hitsPerMinute,proto3" json:"hits_per_minute,omitempty"`
	CastLog         []int32  `protobuf:"varint,17,rep,packed,name=cast_log,json=castLog,proto3" json:"cast_log,omitempty"`
	TripodIndex     *Tripods `protobuf:"bytes,18,opt,name=tripod_index,json=tripodIndex,proto3" json:"tripod_index,omitempty"`
	TripodLevel     *Tripods `protobuf:"bytes,19,opt,name=tripod_level,json=tripodLevel,proto3" json:"tripod_level,omitempty"`
}

func (x *SkillDamage) Reset() {
	*x = SkillDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillDamage) ProtoMessage() {}

func (x *SkillDamage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillDamage.ProtoReflect.Descriptor instead.
func (*SkillDamage) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{10}
}

func (x *SkillDamage) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *SkillDamage) GetDps() int64 {
	if x != nil {
		return x.Dps
	}
	return 0
}

func (x *SkillDamage) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SkillDamage) GetCrit() float32 {
	if x != nil {
		return x.Crit
	}
	return 0
}

func (x *SkillDamage) GetCritDamage() float32 {
	if x != nil {
		return x.CritDamage
	}
	return 0
}

func (x *SkillDamage) GetFrontAttack() float32 {
	if x != nil {
		return x.FrontAttack
	}
	return 0
}

func (x *SkillDamage) GetBackAttack() float32 {
	if x != nil {
		return x.BackAttack
	}
	return 0
}

func (x *SkillDamage) GetBuff() float32 {
	if x != nil {
		return x.Buff
	}
	return 0
}

func (x *SkillDamage) GetBrand() float32 {
	if x != nil {
		return x.Brand
	}
	return 0
}

func (x *SkillDamage) GetAveragePerCasts() float32 {
	if x != nil {
		return x.AveragePerCasts
	}
	return 0
}

func (x *SkillDamage) GetAveragePerHits() float32 {
	if x != nil {
		return x.AveragePerHits
	}
	return 0
}

func (x *SkillDamage) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SkillDamage) GetCasts() int32 {
	if x != nil {
		return x.Casts
	}
	return 0
}

func (x *SkillDamage) GetCastsPerMinute() float32 {
	if x != nil {
		return x.CastsPerMinute
	}
	return 0
}

func (x *SkillDamage) GetHits() int32 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *SkillDamage) GetHitsPerMinute() float32 {
	if x != nil {
		return x.HitsPerMinute
	}
	return 0
}

func (x *SkillDamage) GetCastLog() []int32 {
	if x != nil {
		return x.CastLog
	}
	return nil
}

func (x *SkillDamage) GetTripodIndex() *Tripods {
	if x != nil {
		return x.TripodIndex
	}
	return nil
}

func (x *SkillDamage) GetTripodLevel() *Tripods {
	if x != nil {
		return x.TripodLevel
	}
	return nil
}

type BuffGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Damage  int64            `protobuf:"varint,1,opt,name=damage,proto3" json:"damage,omitempty"`
	Percent float32          `protobuf:"fixed32,2,opt,name=percent,proto3" json:"percent,omitempty"`
	Buffs   map[string]int64 `protobuf:"bytes,3,rep,name=buffs,proto3" json:"buffs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BuffGroup) Reset() {
	*x = BuffGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffGroup) ProtoMessage() {}

func (x *BuffGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffGroup.ProtoReflect.Descriptor instead.
func (*BuffGroup) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{11}
}

func (x *BuffGroup) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *BuffGroup) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *BuffGroup) GetBuffs() map[string]int64 {
	if x != nil {
		return x.Buffs
	}
	return nil
}

type Buffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups map[string]*BuffGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Buffs) Reset() {
	*x = Buffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffs) ProtoMessage() {}

func (x *Buffs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffs.ProtoReflect.Descriptor instead.
func (*Buffs) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{12}
}

func (x *Buffs) GetGroups() map[string]*BuffGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Damage         *PlayerDamage           `protobuf:"bytes,1,opt,name=damage,proto3" json:"damage,omitempty"`
	SkillDamage    map[string]*SkillDamage `protobuf:"bytes,2,rep,name=skill_damage,json=skillDamage,proto3" json:"skill_damage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Synergy        *Buffs                  `protobuf:"bytes,3,opt,name=synergy,proto3" json:"synergy,omitempty"`
	SkillSynergy   map[string]*Buffs       `protobuf:"bytes,4,rep,name=skill_synergy,json=skillSynergy,proto3" json:"skill_synergy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SelfBuff       *Buffs                  `protobuf:"bytes,5,opt,name=self_buff,json=selfBuff,proto3" json:"self_buff,omitempty"`
	SkillSelfBuffs *BuffGroupsInfo         `protobuf:"bytes,6,opt,name=skill_self_buffs,json=skillSelfBuffs,proto3" json:"skill_self_buffs,omitempty"`
	SkillSelfBuff  map[string]*Buffs       `protobuf:"bytes,7,rep,name=skill_self_buff,json=skillSelfBuff,proto3" json:"skill_self_buff,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DpsLog         []int64                 `protobuf:"varint,8,rep,packed,name=dps_log,json=dpsLog,proto3" json:"dps_log,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerData) GetDamage() *PlayerDamage {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *PlayerData) GetSkillDamage() map[string]*SkillDamage {
	if x != nil {
		return x.SkillDamage
	}
	return nil
}

func (x *PlayerData) GetSynergy() *Buffs {
	if x != nil {
		return x.Synergy
	}
	return nil
}

func (x *PlayerData) GetSkillSynergy() map[string]*Buffs {
	if x != nil {
		return x.SkillSynergy
	}
	return nil
}

func (x *PlayerData) GetSelfBuff() *Buffs {
	if x != nil {
		return x.SelfBuff
	}
	return nil
}

func (x *PlayerData) GetSkillSelfBuffs() *BuffGroupsInfo {
	if x != nil {
		return x.SkillSelfBuffs
	}
	return nil
}

func (x *PlayerData) GetSkillSelfBuff() map[string]*Buffs {
	if x != nil {
		return x.SkillSelfBuff
	}
	return nil
}

func (x *PlayerData) GetDpsLog() []int64 {
	if x != nil {
		return x.DpsLog
	}
	return nil
}

type EncounterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffCatalog  map[string]*BuffInfo   `protobuf:"bytes,1,rep,name=buff_catalog,json=buffCatalog,proto3" json:"buff_catalog,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkillCatalog map[string]*SkillInfo  `protobuf:"bytes,2,rep,name=skill_catalog,json=skillCatalog,proto3" json:"skill_catalog,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Synergies    []*BuffGroupsInfo      `protobuf:"bytes,3,rep,name=synergies,proto3" json:"synergies,omitempty"`
	SelfBuffs    *BuffGroupsInfo        `protobuf:"bytes,4,opt,name=self_buffs,json=selfBuffs,proto3" json:"self_buffs,omitempty"`
	Players      map[string]*PlayerData `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BossHpLog    *HPLog                 `protobuf:"bytes,6,opt,name=boss_hp_log,json=bossHpLog,proto3" json:"boss_hp_log,omitempty"`
}

func (x *EncounterData) Reset() {
	*x = EncounterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_process_encproto_encounter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterData) ProtoMessage() {}

func (x *EncounterData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_process_encproto_encounter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterData.ProtoReflect.Descriptor instead.
func (*EncounterData) Descriptor() ([]byte, []int) {
	return file_pkg_process_encproto_encounter_proto_rawDescGZIP(), []int{14}
}

func (x *EncounterData) GetBuffCatalog() map[string]*BuffInfo {
	if x != nil {
		return x.BuffCatalog
	}
	return nil
}

func (x *EncounterData) GetSkillCatalog() map[string]*SkillInfo {
	if x != nil {
		return x.SkillCatalog
	}
	return nil
}

func (x *EncounterData) GetSynergies() []*BuffGroupsInfo {
	if x != nil {
		return x.Synergies
	}
	return nil
}

func (x *EncounterData) GetSelfBuffs() *BuffGroupsInfo {
	if x != nil {
		return x.SelfBuffs
	}
	return nil
}

func (x *EncounterData) GetPlayers() map[string]*PlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *EncounterData) GetBossHpLog() *HPLog {
	if x != nil {
		return x.BossHpLog
	}
	return nil
}

var File_pkg_process_encproto_encounter_proto protoreflect.FileDescriptor

var file_pkg_process_encproto_encounter_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x65, 0x6e,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x4e, 0x0a, 0x0e, 0x48, 0x50, 0x42, 0x6f, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x3e, 0x0a, 0x09, 0x48, 0x50, 0x42, 0x6f, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x50, 0x42, 0x6f, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x05, 0x48, 0x50, 0x4c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x50, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0f, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x50, 0x42, 0x6f, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x09,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x08, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x33, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0d,
	0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x72, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x69, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x68, 0x69, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x54, 0x72, 0x69,
	0x70, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x22, 0xdd, 0x04, 0x0a, 0x0b, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x72, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x72, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x69, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x48, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x68, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x33,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x72, 0x69, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6f, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6f, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x70, 0x6f, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x66,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x42, 0x75, 0x66, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x42, 0x75, 0x66, 0x66,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x05, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x73, 0x52, 0x07, 0x73, 0x79,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73,
	0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x73, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x42, 0x75, 0x66, 0x66, 0x12, 0x41,
	0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x75, 0x66, 0x66,
	0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x75, 0x66, 0x66, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x70, 0x73, 0x4c, 0x6f, 0x67, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4f, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x50, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x75,
	0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x81, 0x05, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x35, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x79,
	0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12,
	0x3d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2e,
	0x0a, 0x0b, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x68, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x50,
	0x4c, 0x6f, 0x67, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x48, 0x70, 0x4c, 0x6f, 0x67, 0x1a, 0x51,
	0x0a, 0x10, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x53, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xa3, 0x06, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x52,
	0x4b, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x41, 0x56, 0x41, 0x47, 0x45, 0x44,
	0x5f, 0x54, 0x59, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x41, 0x53, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x43, 0x55, 0x42, 0x55, 0x53, 0x5f, 0x4d,
	0x4f, 0x52, 0x50, 0x48, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x49, 0x47, 0x48, 0x54,
	0x4d, 0x41, 0x52, 0x49, 0x53, 0x48, 0x5f, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x45, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x56, 0x45, 0x54, 0x4f, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x4f,
	0x55, 0x52, 0x45, 0x52, 0x5f, 0x56, 0x59, 0x4b, 0x41, 0x53, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x4f, 0x56, 0x45, 0x54, 0x4f, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x59, 0x4b, 0x41, 0x53, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x41, 0x59, 0x44, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x4b, 0x41, 0x4b, 0x55, 0x4c, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x41, 0x4b, 0x55,
	0x4c, 0x5f, 0x53, 0x41, 0x59, 0x44, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45,
	0x48, 0x45, 0x4e, 0x4e, 0x41, 0x5f, 0x48, 0x45, 0x4c, 0x4b, 0x41, 0x53, 0x49, 0x52, 0x53, 0x10,
	0x09, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4b, 0x45, 0x4c, 0x5f, 0x53, 0x50, 0x49, 0x52,
	0x49, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x53, 0x48, 0x54, 0x41, 0x52, 0x4f, 0x54, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x49, 0x4d, 0x4f, 0x52, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41,
	0x52, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x52, 0x45, 0x4c, 0x53, 0x48, 0x41, 0x5a,
	0x41, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x48, 0x41,
	0x4e, 0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x52, 0x45, 0x4c, 0x53, 0x48, 0x41, 0x5a, 0x41, 0x10,
	0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45, 0x4e, 0x49, 0x53, 0x10, 0x0f, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x52, 0x55, 0x4e, 0x59, 0x41, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x55,
	0x52, 0x49, 0x45, 0x4c, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x5f, 0x4d, 0x41, 0x55, 0x52, 0x55, 0x47, 0x41, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4b, 0x4b, 0x41, 0x4e, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4c,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4b, 0x4b, 0x41, 0x4e, 0x10, 0x14, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4b, 0x41, 0x52, 0x54, 0x48, 0x45, 0x4f,
	0x4e, 0x5f, 0x41, 0x4b, 0x4b, 0x41, 0x4e, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x41, 0x4c,
	0x54, 0x41, 0x59, 0x41, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x48, 0x41, 0x4f, 0x53, 0x10, 0x16, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x41, 0x4b,
	0x41, 0x54, 0x48, 0x55, 0x53, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4c, 0x55, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x47, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x17, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x49, 0x52, 0x45, 0x48, 0x4f, 0x52, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x41, 0x52, 0x54, 0x48, 0x10, 0x18, 0x12, 0x1b, 0x0a,
	0x17, 0x4c, 0x41, 0x5a, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x49, 0x4c, 0x42, 0x4c, 0x41, 0x5a, 0x45, 0x52, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45,
	0x53, 0x4b, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x52, 0x47, 0x41, 0x44,
	0x45, 0x54, 0x48, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x4e, 0x41, 0x56, 0x45, 0x4c,
	0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4e, 0x55, 0x4d, 0x41, 0x54, 0x41, 0x4e, 0x10,
	0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4c, 0x49, 0x4c, 0x49, 0x47, 0x4f, 0x53, 0x10, 0x1e,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x4b, 0x41, 0x4c, 0x55, 0x44, 0x41, 0x10, 0x1f, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x55, 0x4e, 0x47, 0x45, 0x4c, 0x41, 0x4e, 0x49, 0x55, 0x4d, 0x10, 0x20,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x48, 0x41, 0x54, 0x45, 0x53, 0x10, 0x21, 0x42, 0x2b, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x30, 0x66, 0x61, 0x75,
	0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_process_encproto_encounter_proto_rawDescOnce sync.Once
	file_pkg_process_encproto_encounter_proto_rawDescData = file_pkg_process_encproto_encounter_proto_rawDesc
)

func file_pkg_process_encproto_encounter_proto_rawDescGZIP() []byte {
	file_pkg_process_encproto_encounter_proto_rawDescOnce.Do(func() {
		file_pkg_process_encproto_encounter_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_process_encproto_encounter_proto_rawDescData)
	})
	return file_pkg_process_encproto_encounter_proto_rawDescData
}

var file_pkg_process_encproto_encounter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_process_encproto_encounter_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pkg_process_encproto_encounter_proto_goTypes = []interface{}{
	(EncounterBoss)(0),     // 0: process.EncounterBoss
	(*HPBossLogEntry)(nil), // 1: process.HPBossLogEntry
	(*HPBossLog)(nil),      // 2: process.HPBossLog
	(*HPLog)(nil),          // 3: process.HPLog
	(*BuffSkill)(nil),      // 4: process.BuffSkill
	(*BuffInfo)(nil),       // 5: process.BuffInfo
	(*SkillInfo)(nil),      // 6: process.SkillInfo
	(*BuffGroupInfo)(nil),  // 7: process.BuffGroupInfo
	(*BuffGroupsInfo)(nil), // 8: process.BuffGroupsInfo
	(*PlayerDamage)(nil),   // 9: process.PlayerDamage
	(*Tripods)(nil),        // 10: process.Tripods
	(*SkillDamage)(nil),    // 11: process.SkillDamage
	(*BuffGroup)(nil),      // 12: process.BuffGroup
	(*Buffs)(nil),          // 13: process.Buffs
	(*PlayerData)(nil),     // 14: process.PlayerData
	(*EncounterData)(nil),  // 15: process.EncounterData
	nil,                    // 16: process.HPLog.EncountersEntry
	nil,                    // 17: process.BuffGroup.BuffsEntry
	nil,                    // 18: process.Buffs.GroupsEntry
	nil,                    // 19: process.PlayerData.SkillDamageEntry
	nil,                    // 20: process.PlayerData.SkillSynergyEntry
	nil,                    // 21: process.PlayerData.SkillSelfBuffEntry
	nil,                    // 22: process.EncounterData.BuffCatalogEntry
	nil,                    // 23: process.EncounterData.SkillCatalogEntry
	nil,                    // 24: process.EncounterData.PlayersEntry
}
var file_pkg_process_encproto_encounter_proto_depIdxs = []int32{
	1,  // 0: process.HPBossLog.entries:type_name -> process.HPBossLogEntry
	16, // 1: process.HPLog.encounters:type_name -> process.HPLog.EncountersEntry
	4,  // 2: process.BuffInfo.skill:type_name -> process.BuffSkill
	7,  // 3: process.BuffGroupsInfo.groups:type_name -> process.BuffGroupInfo
	10, // 4: process.SkillDamage.tripod_index:type_name -> process.Tripods
	10, // 5: process.SkillDamage.tripod_level:type_name -> process.Tripods
	17, // 6: process.BuffGroup.buffs:type_name -> process.BuffGroup.BuffsEntry
	18, // 7: process.Buffs.groups:type_name -> process.Buffs.GroupsEntry
	9,  // 8: process.PlayerData.damage:type_name -> process.PlayerDamage
	19, // 9: process.PlayerData.skill_damage:type_name -> process.PlayerData.SkillDamageEntry
	13, // 10: process.PlayerData.synergy:type_name -> process.Buffs
	20, // 11: process.PlayerData.skill_synergy:type_name -> process.PlayerData.SkillSynergyEntry
	13, // 12: process.PlayerData.self_buff:type_name -> process.Buffs
	8,  // 13: process.PlayerData.skill_self_buffs:type_name -> process.BuffGroupsInfo
	21, // 14: process.PlayerData.skill_self_buff:type_name -> process.PlayerData.SkillSelfBuffEntry
	22, // 15: process.EncounterData.buff_catalog:type_name -> process.EncounterData.BuffCatalogEntry
	23, // 16: process.EncounterData.skill_catalog:type_name -> process.EncounterData.SkillCatalogEntry
	8,  // 17: process.EncounterData.synergies:type_name -> process.BuffGroupsInfo
	8,  // 18: process.EncounterData.self_buffs:type_name -> process.BuffGroupsInfo
	24, // 19: process.EncounterData.players:type_name -> process.EncounterData.PlayersEntry
	3,  // 20: process.EncounterData.boss_hp_log:type_name -> process.HPLog
	2,  // 21: process.HPLog.EncountersEntry.value:type_name -> process.HPBossLog
	12, // 22: process.Buffs.GroupsEntry.value:type_name -> process.BuffGroup
	11, // 23: process.PlayerData.SkillDamageEntry.value:type_name -> process.SkillDamage
	13, // 24: process.PlayerData.SkillSynergyEntry.value:type_name -> process.Buffs
	13, // 25: process.PlayerData.SkillSelfBuffEntry.value:type_name -> process.Buffs
	5,  // 26: process.EncounterData.BuffCatalogEntry.value:type_name -> process.BuffInfo
	6,  // 27: process.EncounterData.SkillCatalogEntry.value:type_name -> process.SkillInfo
	14, // 28: process.EncounterData.PlayersEntry.value:type_name -> process.PlayerData
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_pkg_process_encproto_encounter_proto_init() }
func file_pkg_process_encproto_encounter_proto_init() {
	if File_pkg_process_encproto_encounter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_process_encproto_encounter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPBossLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPBossLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffGroupsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tripods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_process_encproto_encounter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_process_encproto_encounter_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_process_encproto_encounter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_process_encproto_encounter_proto_goTypes,
		DependencyIndexes: file_pkg_process_encproto_encounter_proto_depIdxs,
		EnumInfos:         file_pkg_process_encproto_encounter_proto_enumTypes,
		MessageInfos:      file_pkg_process_encproto_encounter_proto_msgTypes,
	}.Build()
	File_pkg_process_encproto_encounter_proto = out.File
	file_pkg_process_encproto_encounter_proto_rawDesc = nil
	file_pkg_process_encproto_encounter_proto_goTypes = nil
	file_pkg_process_encproto_encounter_proto_depIdxs = nil
}
