// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: pkg/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Process_FullMethodName      = "/admin.Admin/Process"
	Admin_Delete_FullMethodName       = "/admin.Admin/Delete"
	Admin_ProcessAll_FullMethodName   = "/admin.Admin/ProcessAll"
	Admin_ProcessHash_FullMethodName  = "/admin.Admin/ProcessHash"
	Admin_RunOperation_FullMethodName = "/admin.Admin/RunOperation"
	Admin_Role_FullMethodName         = "/admin.Admin/Role"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ProcessAll(ctx context.Context, in *ProcessAllRequest, opts ...grpc.CallOption) (*ProcessAllResponse, error)
	ProcessHash(ctx context.Context, in *ProcessHashRequest, opts ...grpc.CallOption) (*ProcessHashResponse, error)
	RunOperation(ctx context.Context, in *RunOperationRequest, opts ...grpc.CallOption) (*RunOperationResponse, error)
	Role(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, Admin_Process_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Admin_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProcessAll(ctx context.Context, in *ProcessAllRequest, opts ...grpc.CallOption) (*ProcessAllResponse, error) {
	out := new(ProcessAllResponse)
	err := c.cc.Invoke(ctx, Admin_ProcessAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProcessHash(ctx context.Context, in *ProcessHashRequest, opts ...grpc.CallOption) (*ProcessHashResponse, error) {
	out := new(ProcessHashResponse)
	err := c.cc.Invoke(ctx, Admin_ProcessHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RunOperation(ctx context.Context, in *RunOperationRequest, opts ...grpc.CallOption) (*RunOperationResponse, error) {
	out := new(RunOperationResponse)
	err := c.cc.Invoke(ctx, Admin_RunOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Role(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, Admin_Role_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ProcessAll(context.Context, *ProcessAllRequest) (*ProcessAllResponse, error)
	ProcessHash(context.Context, *ProcessHashRequest) (*ProcessHashResponse, error)
	RunOperation(context.Context, *RunOperationRequest) (*RunOperationResponse, error)
	Role(context.Context, *RoleRequest) (*RoleResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Process(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedAdminServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminServer) ProcessAll(context.Context, *ProcessAllRequest) (*ProcessAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAll not implemented")
}
func (UnimplementedAdminServer) ProcessHash(context.Context, *ProcessHashRequest) (*ProcessHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessHash not implemented")
}
func (UnimplementedAdminServer) RunOperation(context.Context, *RunOperationRequest) (*RunOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunOperation not implemented")
}
func (UnimplementedAdminServer) Role(context.Context, *RoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Role not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProcessAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProcessAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ProcessAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProcessAll(ctx, req.(*ProcessAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProcessHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProcessHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ProcessHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProcessHash(ctx, req.(*ProcessHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RunOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RunOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RunOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RunOperation(ctx, req.(*RunOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Role_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Role(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Role_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Role(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Admin_Process_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Admin_Delete_Handler,
		},
		{
			MethodName: "ProcessAll",
			Handler:    _Admin_ProcessAll_Handler,
		},
		{
			MethodName: "ProcessHash",
			Handler:    _Admin_ProcessHash_Handler,
		},
		{
			MethodName: "RunOperation",
			Handler:    _Admin_RunOperation_Handler,
		},
		{
			MethodName: "Role",
			Handler:    _Admin_Role_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/admin/admin.proto",
}
