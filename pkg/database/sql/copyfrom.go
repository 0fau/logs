// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: copyfrom.go

package sql

import (
	"context"
)

// iteratorForInsertBuff implements pgx.CopyFromSource.
type iteratorForInsertBuff struct {
	rows                 []InsertBuffParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertBuff) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertBuff) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Encounter,
		r.rows[0].Player,
		r.rows[0].BuffID,
		r.rows[0].Percent,
		r.rows[0].Damage,
	}, nil
}

func (r iteratorForInsertBuff) Err() error {
	return nil
}

func (q *Queries) InsertBuff(ctx context.Context, arg []InsertBuffParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"buffs"}, []string{"encounter", "player", "buff_id", "percent", "damage"}, &iteratorForInsertBuff{rows: arg})
}

// iteratorForInsertSkill implements pgx.CopyFromSource.
type iteratorForInsertSkill struct {
	rows                 []InsertSkillParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertSkill) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertSkill) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Encounter,
		r.rows[0].Player,
		r.rows[0].SkillID,
		r.rows[0].Casts,
		r.rows[0].Crits,
		r.rows[0].Dps,
		r.rows[0].Hits,
		r.rows[0].MaxDamage,
		r.rows[0].TotalDamage,
		r.rows[0].Name,
	}, nil
}

func (r iteratorForInsertSkill) Err() error {
	return nil
}

func (q *Queries) InsertSkill(ctx context.Context, arg []InsertSkillParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"skills"}, []string{"encounter", "player", "skill_id", "casts", "crits", "dps", "hits", "max_damage", "total_damage", "name"}, &iteratorForInsertSkill{rows: arg})
}
